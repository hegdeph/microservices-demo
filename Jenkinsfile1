def MASTER_NAME
  def SERVER_IPS
  def FRONTEND_ADDRESS
  def SELENIUM_GRID_ADDRESS


pipeline {

  environment {
    PROJECT = "jovial-coral-242011"
    FE_SVC_NAME = "${APP_NAME}-frontend"
    CLUSTER = "application-infra"
    CLUSTER_ZONE = "us-east1-b"
    JENKINS_CRED = "${PROJECT}"
    
  }

  agent {
    kubernetes {
      label 'masked-terrier-jenkins-slave'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: masked-terrier-jenkins-slave
  containers:
  - name: golang
    image: golang:1.10
    command:
    - cat
    tty: true
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    command:
    - cat
    tty: true
  - name: dotnet
    image: mcr.microsoft.com/dotnet/core/sdk:2.1
    command:
    - cat
    tty: true    
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true
  - name: mvn
    image: gcr.io/cloud-builders/mvn
    command:
    - cat
    tty: true
"""
}
}
stages {




 stage('Static Code analysis') {
        when{
          branch 'staging'
        }

        environment {
          scannerHome = tool 'HipsterSonarScanner'
        }

        steps {
            
            withSonarQubeEnv('Sonar-Scanner') {
                sh "${scannerHome}/bin/sonar-scanner -Dsonar.java.binaries=. -Dsonar.login='ac26c3839989e62c59c24282b3c0498fc1ef2ebc' -Dsonar.projectKey=hipster -Dsonar.sources='./src/productcatalogservice'"
          }
        
        }
      }
      
      stage("Quality Gate") {
        when{
          branch 'staging'
        }
            steps {
              timeout(time: 1, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
              }
            }
      }

      stage('Unit Test'){
        when{
          branch 'master'
        }
              steps{
                    container('gcloud') {
                        script {
                                  sh 'dotnet --info'
                                  sh 'dotnet test tests/cartservice/cartservice.tests.csproj'
                                  sh ' echo Tests successful on new jenkins server!!'
                                }
                        }
                }
        }  

        stage('Production Build & Deploy') {
                when {
                  branch 'master'
              }
          steps {
            container('gcloud') {
                sh "PYTHONUNBUFFERED=1 gcloud builds submit --config=cloudbuild.yaml --substitutions=_PROJECT_ID=$PROJECT,_ZONE=$CLUSTER_ZONE,_CLUSTER=$CLUSTER,_BUILD_NUMBER=$BUILD_NUMBER,_NAMESPACE='production' ."
            }
          }
      }
	stage('Staging Buildi& Deploy') {
                when {
                	branch 'staging'
            	}
      		steps {
        		container('gcloud') {
          			sh "PYTHONUNBUFFERED=1 gcloud builds submit --config=cloudbuild.yaml --substitutions=_PROJECT_ID=$PROJECT,_ZONE=$CLUSTER_ZONE,_CLUSTER=$CLUSTER,_BUILD_NUMBER=$BUILD_NUMBER,_NAMESPACE=staging ."
        		}
      		}
    	}

stage('Functional Testing'){

            steps{

                        container('kubectl'){
                
                                withKubeConfig([credentialsId: 'kube-token-application-infra',
                                serverUrl: 'https://34.73.114.12',
                                clusterName: 'application-infra',
                                namespace: 'default'
                               ]){
                                  sh 'kubectl config view'
                                  sh 'kubectl get services'

                                  sh 'kubectl get svc frontend-external -n production   -o jsonpath="{.status.loadBalancer.ingress[*].ip}"  > /home/jenkins/agent/workspace/Hipster_master/front_end_address'
                        
                                  script{ 
                                           FRONTEND_ADDRESS = readFile('/home/jenkins/agent/workspace/Hipster_master/front_end_address')
                                  }
                                  echo "${FRONTEND_ADDRESS}"
                              }
                    
                       }

                       container('kubectl'){

                                sh 'kubectl get svc selenium-grid-selenium-hub   -o jsonpath="{.status.loadBalancer.ingress[*].ip}"  > /home/jenkins/agent/workspace/Hipster_master/selenium_grid_address'
                        
                                  script{ 
                                           SELENIUM_GRID_ADDRESS = readFile('/home/jenkins/agent/workspace/Hipster_master/selenium_grid_address')
                                  }
                                  echo "${SELENIUM_GRID_ADDRESS}"

                       }

                        container('mvn'){
                                sh 'uname -a'
                                sh 'mvn --version'
                                sh "mvn  -f selenium-tests/pom.xml -DsuiteXmlFile=selenium-tests/src/test/resources/testng.xml -DTARGET_URL=${FRONTEND_ADDRESS} -DSELENIUM_GRID_URL=${SELENIUM_GRID_ADDRESS} test"
                                sh 'ls -lrt selenium-tests/target/test-classes'
                            }


            }
        }
  stage('Performance Testing'){
           
            steps{
			container('kubectl'){

        sh "sed -i 's/@@target_address@@/${FRONTEND_ADDRESS}/' sample.jmx"
				sh 'kubectl cp sample.jmx \$(kubectl get pods -l app.kubernetes.io/component=master -o jsonpath="{.items[*].metadata.name}"):/jmeter'
				sh 'kubectl exec -it \$(kubectl get pods -l app.kubernetes.io/component=master -o jsonpath="{.items[*].metadata.name}") -- rm -f *.jtl'
				sh 'kubectl exec -it \$(kubectl get pods -l app.kubernetes.io/component=master -o jsonpath="{.items[*].metadata.name}") -- jmeter -n -t /jmeter/sample.jmx -R \$(kubectl get pods -l app.kubernetes.io/component=server -o jsonpath="{.items[*].status.podIP}" | tr " " ",") -l log.jtl'
				sh 'kubectl cp \$(kubectl get pods -l app.kubernetes.io/component=master -o jsonpath="{.items[*].metadata.name}"):log.jtl ./log.jtl'
				sh 'cat log.jtl'
                
            
            }
        }
}


}
}

